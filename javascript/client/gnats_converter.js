/*
 * gnats_converter — Normalize mixed utf-8, ascii, iso8859-1 and windows-1252 data into utf-8
 * © 2021 Phoenix Software International, MIT License
 * vim: syntax=javascript
 *
 * Parameter MUST be a string of bytes not characters. See ajax byte acquisition below.
 * A string of characters is returned.
 */

function converter(raw) {
  const ascii_extended = [
    /* windows-1252 only */
    [0xe2,0x82,0xac],[0xc2,0x81],[0xe2,0x80,0x9a],[0xc6,0x92],[0xe2,0x80,0x9e],[0xe2,0x80,0xa6],[0xe2,0x80,0xa0],[0xe2,0x80,0xa1],
    [0xcb,0x86],[0xe2,0x80,0xb0],[0xC5,0xA0],[0xe2,0x80,0xb9],[0xc5,0x92],[0xc2,0x8d],[0xc5,0xbd],[0xc2,0x8f],
    [0xc2,0x90],[0xe2,0x80,0x98],[0xe2,0x80,0x99],[0xe2,0x80,0x9c],[0xe2,0x80,0x9d],[0xe2,0x80,0xa2],[0xe2,0x80,0x93],[0xe2,0x80,0x94],
    [0xcb,0x9c],[0xe2,0x84,0xa2],[0xc5,0xa1],[0xe2,0x80,0xba],[0xc5,0x93],[0xc2,0x9d],[0xc5,0xbe],[0xc5,0xb8],
    /* iso8859-1 and windows-1252 */
    [0xc2,0xa0],[0xc2,0xa1],[0xc2,0xa2],[0xc2,0xa3],[0xc2,0xa4],[0xc2,0xa5],[0xc2,0xa6],[0xc2,0xa7],
    [0xc2,0xa8],[0xc2,0xa9],[0xc2,0xaa],[0xc2,0xab],[0xc2,0xac],[0xc2,0xad],[0xc2,0xae],[0xc2,0xaf],
    [0xc2,0xb0],[0xc2,0xb1],[0xc2,0xb2],[0xc2,0xb3],[0xc2,0xb4],[0xc2,0xb5],[0xc2,0xb6],[0xc2,0xb7],
    [0xc2,0xb8],[0xc2,0xb9],[0xc2,0xba],[0xc2,0xbb],[0xc2,0xbc],[0xc2,0xbd],[0xc2,0xbe],[0xc2,0xbf],
    [0xc3,0x80],[0xc3,0x81],[0xc3,0x82],[0xc3,0x83],[0xc3,0x84],[0xc3,0x85],[0xc3,0x86],[0xc3,0x87],
    [0xc3,0x88],[0xc3,0x89],[0xc3,0x8a],[0xc3,0x8b],[0xc3,0x8c],[0xc3,0x8d],[0xc3,0x8e],[0xc3,0x8f],
    [0xc3,0x90],[0xc3,0x91],[0xc3,0x92],[0xc3,0x93],[0xc3,0x94],[0xc3,0x95],[0xc3,0x96],[0xc3,0x97],
    [0xc3,0x98],[0xc3,0x99],[0xc3,0x9a],[0xc3,0x9b],[0xc3,0x9c],[0xc3,0x9d],[0xc3,0x9e],[0xc3,0x9f],
    [0xc3,0xa0],[0xc3,0xa1],[0xc3,0xa2],[0xc3,0xa3],[0xc3,0xa4],[0xc3,0xa5],[0xc3,0xa6],[0xc3,0xa7],
    [0xc3,0xa8],[0xc3,0xa9],[0xc3,0xaa],[0xc3,0xab],[0xc3,0xac],[0xc3,0xad],[0xc3,0xae],[0xc3,0xaf],
    [0xc3,0xb0],[0xc3,0xb1],[0xc3,0xb2],[0xc3,0xb3],[0xc3,0xb4],[0xc3,0xb5],[0xc3,0xb6],[0xc3,0xb7],
    [0xc3,0xb8],[0xc3,0xb9],[0xc3,0xba],[0xc3,0xbb],[0xc3,0xbc],[0xc3,0xbd],[0xc3,0xbe],[0xc3,0xbf]
    ]
  var j = 0, k = 0, u = 0
  var len = raw.length
  var x = []
  var s = ''
  for ( i = 0 ; i < len ; i++ ) x.push(raw.charCodeAt(i) & 255);
  for ( let i = 0 ; i < len ; i++ ) {
    let n = x[i]
    if ( ! (n < 128) ) {
      if ( i > k ) {
        for ( j = 0 ; k + j < i ; j++ )
          s += String.fromCharCode(x[k+j])
      }
      if ( (n & 0xe0) == 0xc0 && (n + 1 < len) && (x[i+1] & 0xc0) == 0x80 ) {
        s += String.fromCharCode(((x[i+0] & 0x1f) << 6) | (x[i+1] & 0x3f))
        i += 1
        k = i + 1
      }
      else if ( (n & 0xf0) == 0xe0 && (n + 2 < len) && (x[i+1] & 0xc0) == 0x80 && (x[i+2] & 0xc0) == 0x80 ) {
        s += String.fromCharCode(((x[i+0] & 0x0f) << 12) | ((x[i+1] & 0x3f) << 6) | (x[i+2] & 0x3f))
        i += 2
        k = i + 1
      }
      else if ( (n & 0xf8) == 0xf0 && (n + 3 < len) && (x[i+1] & 0xc0) == 0x80 && (x[i+2] & 0xc0) == 0x80 && (x[i+3] & 0xc0) == 0x80 ) {
        s += String.fromCharCode(((x[i+0] & 0x07) << 18) | ((x[i+1] & 0x3f) << 12) | ((x[i+2] & 0x3f) << 6)  | (x[i+3] & 0x3f))
        i += 3
        k = i + 1
      }
      else {
        var slen = ascii_extended[n-128].length
        for ( j = 0, u = 0 ; j < slen ; j++ )
          u = (u << 6) | (ascii_extended[n-128][j] & (j ? 0x3f : 0xff >> slen))
        s += String.fromCharCode(u)
        k = i + 1
      }
    }
  }
  if ( k < len )
    for ( j = 0 ; k + j < len ; j++ )
      s += String.fromCharCode(x[k+j])

  return s
}

/*
 * N.B. The converter function cannot work with character strings, so acquire content as raw bytes
 * with charset=x-user-defined via ajax and call converter to normalize them into a utf-8 string.
 */
$.ajax({
  type: "GET",
  url: targetURL,
  beforeSend: function (xhr) { xhr.overrideMimeType('text/plain; charset=x-user-defined'); },
  success: function (data, text, xhr) {
    if ( ! (data.length < 1) ) {
      var b = '';
      var d = xhr.responseText;
      var dlen = d.length;
      for ( j = 0 ; j < dlen ; j++ )
        b += String.fromCharCode(d.charCodeAt(j) & 255)
      content = converter(b)
      /* content now contains normalized utf-8 */
    }
  },
  error: function(xhr, textStatus, errorThrown){
    /* report error */
  }
})
